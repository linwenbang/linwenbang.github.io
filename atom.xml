<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>邦ben</title>
  <subtitle>do not repeat</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://bangben.site/"/>
  <updated>2016-06-23T03:47:05.000Z</updated>
  <id>http://bangben.site/</id>
  
  <author>
    <name>bangben</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>根据项目需求制定简单的git flow流程试行</title>
    <link href="http://bangben.site/2016/06/23/flow%E6%B5%81%E7%A8%8B%E8%AF%95%E8%A1%8C/"/>
    <id>http://bangben.site/2016/06/23/flow流程试行/</id>
    <published>2016-06-23T00:54:32.000Z</published>
    <updated>2016-06-23T03:47:05.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MLeaksFinder使用过程中收集的内存泄露问题</title>
    <link href="http://bangben.site/2016/06/08/MLeaksFinder%E4%BD%BF%E7%94%A8%E8%BF%87%E7%A8%8B%E4%B8%AD%E6%94%B6%E9%9B%86%E7%9A%84%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E9%97%AE%E9%A2%98/"/>
    <id>http://bangben.site/2016/06/08/MLeaksFinder使用过程中收集的内存泄露问题/</id>
    <published>2016-06-08T12:38:16.000Z</published>
    <updated>2016-06-23T00:50:06.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;内存泄露使用过程发现的问题&quot;&gt;&lt;a href=&quot;#内存泄露使用过程发现的问题&quot; class=&quot;headerlink&quot; title=&quot;内存泄露使用过程发现的问题&quot;&gt;&lt;/a&gt;内存泄露使用过程发现的问题&lt;/h1&gt;&lt;p&gt;1.在MRC转到ARC后，依旧使用&lt;code&gt;__block&lt;/code&gt;进行 弱引用，都需要切换成 &lt;code&gt;__weak&lt;/code&gt;去使用&lt;br&gt;2.@property 和 _property的使用&lt;br&gt;3.block导致的循环引用&lt;br&gt;4.sendAction带来的泄露问题&lt;br&gt;5.perform 和 timer等延时，导致viewcontroller关闭，还没来得及释放的问题&lt;br&gt;6.keyborad键盘的问题,&lt;br&gt;7.c++ api 中的delegate 为strong&lt;/p&gt;
&lt;h2 id=&quot;循环引用的准则&quot;&gt;&lt;a href=&quot;#循环引用的准则&quot; class=&quot;headerlink&quot; title=&quot;循环引用的准则&quot;&gt;&lt;/a&gt;循环引用的准则&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;原则，引用计数不为0，则不能释放&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;检查的原则&quot;&gt;&lt;a href=&quot;#检查的原则&quot; class=&quot;headerlink&quot; title=&quot;检查的原则&quot;&gt;&lt;/a&gt;检查的原则&lt;/h3&gt;&lt;p&gt;1.首先检查block中是否有self的使用&lt;br&gt;2.检查是否有私有变量在block中&lt;br&gt;3.搜索 = self,看下self有没有被复制到其他类进行强引用&lt;/p&gt;
&lt;h3 id=&quot;解决block-self的使用&quot;&gt;&lt;a href=&quot;#解决block-self的使用&quot; class=&quot;headerlink&quot; title=&quot;解决block self的使用&quot;&gt;&lt;/a&gt;解决block self的使用&lt;/h3&gt;&lt;p&gt;案例分析1：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.rootScrollView.mj_header = [PPRefreshHeader headerWithRefreshingBlock:^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; getData];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以上可以看到 self &amp;lt;- rootScrollView &amp;lt;- mj_header &amp;lt;- block &amp;lt;- self，这样子形成了一个循环，在这种情况下，必然会形成循环引用的&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;__&lt;span class=&quot;keyword&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;) *weakSelf = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.rootScrollView.mj_header = [PPRefreshHeader headerWithRefreshingBlock:^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    __&lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;) *strongSelf = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [strongSelf getData]; &lt;span class=&quot;comment&quot;&gt;//strongSelf用来防止在block执行过程中释放掉，如果在进入block前，self已经释放了，自然而然这个block也就释放了，这段代码也不会跑了&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;案例分析2：&lt;br&gt;&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;dispatch_once_t&lt;/span&gt; onceToken;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;dispatch_once&lt;/span&gt;(&amp;amp;onceToken, ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       dispatch_main_async_safe(^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; initTableView];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;由上面可以看出，在使用GCD的时候，是不需要使用&lt;code&gt;__weak&lt;/code&gt;的，这是因为GCD 的block 并不是self的propety,所有self并不会持有GCD的block，因此不构成循环&lt;/p&gt;
&lt;p&gt;同理 UIView 等block也是一样，在这段代码跑完之后，block就会释放掉&lt;/p&gt;
&lt;p&gt;案例分析3：&lt;br&gt;但是在GCD中 如果用到&lt;code&gt;dispatch_after&lt;/code&gt; 或者&lt;br&gt;&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; performSelector:@selecter(xxxx:) withObject:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; afterDelay:&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这类延时操作的时候，如果self 在延时时间没到的时候，例如4s的时候，就pop回前一个页面了，这时候，延时的操作中如果用到 self ,则会导致self被持有 无法释放&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;解决办法：&lt;br&gt;在pop之前 取消掉没有来得及执行的延时函数,或者在GCD中使用weakSelf&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//取消那些还没有来得及执行的延时函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;built_in&quot;&gt;NSObject&lt;/span&gt; cancelPreviousPerformRequestsWithTarget:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//也可以一个一个得这样用：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;built_in&quot;&gt;NSObject&lt;/span&gt; cancelPreviousPerformRequestsWithTarget:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; selector:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(method1:) object:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;内存泄露使用过程发现的问题&quot;&gt;&lt;a href=&quot;#内存泄露使用过程发现的问题&quot; class=&quot;headerlink&quot; title=&quot;内存泄露使用过程发现的问题&quot;&gt;&lt;/a&gt;内存泄露使用过程发现的问题&lt;/h1&gt;&lt;p&gt;1.在MRC转到ARC后，依旧使用&lt;code&gt;__b
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>runtime获取所有属性(包括所有父类)</title>
    <link href="http://bangben.site/2016/05/30/runtime-%E8%8E%B7%E5%8F%96%E6%89%80%E6%9C%89%E5%B1%9E%E6%80%A7-%E5%8C%85%E6%8B%AC%E6%89%80%E6%9C%89%E7%88%B6%E7%B1%BB/"/>
    <id>http://bangben.site/2016/05/30/runtime-获取所有属性-包括所有父类/</id>
    <published>2016-05-30T01:42:59.000Z</published>
    <updated>2016-06-23T00:50:06.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;class-copyPropertyList&quot;&gt;&lt;a href=&quot;#class-copyPropertyList&quot; class=&quot;headerlink&quot; title=&quot;class_copyPropertyList&quot;&gt;&lt;/a&gt;class_copyPropertyList&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;class_copyPropertyList只能获取到当前对象的属性，不能获取其父类属性的值，因此使用递归读取所有父类的属性值并且用KVC取值 &lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;NSMutableDictionary&lt;/span&gt; *)getAllPropertiesAndVaules:(Class)cls&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSMutableDictionary&lt;/span&gt; *superProps;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Class superCls = class_getSuperclass([cls class]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (superCls != [&lt;span class=&quot;built_in&quot;&gt;NSObject&lt;/span&gt; class]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        superProps = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; getAllPropertiesAndVaules:superCls];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        superProps = [&lt;span class=&quot;built_in&quot;&gt;NSMutableDictionary&lt;/span&gt; dictionary];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSMutableDictionary&lt;/span&gt; *props = [&lt;span class=&quot;built_in&quot;&gt;NSMutableDictionary&lt;/span&gt; dictionaryWithDictionary:superProps];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; outCount, i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    objc_property_t *properties =class_copyPropertyList(cls, &amp;amp;outCount);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; outCount; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        objc_property_t property = properties[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;* char_f =property_getName(property);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *propertyName = [&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; stringWithUTF8String:char_f];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; propertyValue = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; valueForKey:(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)propertyName];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//如果需要处理对象，将对象作为另外一个dic处理话,最好的方法是让自定义类继承BaseData进行处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([propertyValue isKindOfClass:[&lt;span class=&quot;built_in&quot;&gt;NSObject&lt;/span&gt; class]]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            propertyValue = [(BaseData *)propertyValue returnDictionary];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;//其他类型或许需要处理封装成number&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (propertyValue) [props setObject:propertyValue forKey:propertyName];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    free(properties);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; props;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;class-copyPropertyList&quot;&gt;&lt;a href=&quot;#class-copyPropertyList&quot; class=&quot;headerlink&quot; title=&quot;class_copyPropertyList&quot;&gt;&lt;/a&gt;class_copyPropertyLi
    
    </summary>
    
    
  </entry>
  
</feed>
